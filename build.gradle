apply plugin: "java"

version '1.0'

sourceSets.main.java.srcDirs = ["src"]

repositories{
    mavenCentral()
    maven{ url "https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
    maven{ url 'https://www.jitpack.io' }
}

java{
    targetCompatibility = 8
    sourceCompatibility = JavaVersion.VERSION_17
}

ext{
    //the build number that this mod is made for
    mindustryVersion = 'v146'
    jabelVersion = "93fde537c7"
    //windows sucks
    isWindows = System.getProperty("os.name").toLowerCase().contains("windows")
    sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")
}

//java 8 backwards compatibility flag
allprojects{
    tasks.withType(JavaCompile){
        options.compilerArgs.addAll(['--release', '8'])
    }
}

dependencies{
    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
    
    annotationProcessor "com.github.Anuken:jabel:$jabelVersion"

    implementation("org.bytedeco:javacv-platform:1.5.11")
            {
        exclude group: "org.bytedeco", module: "artoolkitplus"
        exclude group: "org.bytedeco", module: "artoolkitplus-platform"
        exclude group: "org.bytedeco", module: "libdc1394"
        exclude group: "org.bytedeco", module: "libdc1394-platform"
        exclude group: "org.bytedeco", module: "flycapture"
        exclude group: "org.bytedeco", module: "flycapture-platform"
        exclude group: "org.bytedeco", module: "leptonica"
        exclude group: "org.bytedeco", module: "leptonica-platform"
        exclude group: "org.bytedeco", module: "libfreenect"
        exclude group: "org.bytedeco", module: "libfreenect-platform"
        exclude group: "org.bytedeco", module: "libfreenect2"
        exclude group: "org.bytedeco", module: "libfreenect2-platform"
        exclude group: "org.bytedeco", module: "librealsense"
        exclude group: "org.bytedeco", module: "librealsense-platform"
        exclude group: "org.bytedeco", module: "librealsense2"
        exclude group: "org.bytedeco", module: "librealsense2-platform"
        exclude group: "org.bytedeco", module: "tesseract"
        exclude group: "org.bytedeco", module: "tesseract-platform"
        exclude group: "org.bytedeco", module: "videoinput"
        exclude group: "org.bytedeco", module: "videoinput-platform"
    }

}

//force arc version
configurations.all{
    resolutionStrategy.eachDependency { details ->
        if(details.requested.group == 'com.github.Anuken.Arc'){
            details.useVersion "$mindustryVersion"
        }
    }
}

// todo remove copy pastes (laziness)
def platforms = ["windows", "macos", "linux", "ios-x86", "ios-arm64", "android-arm64", "android-x86"]

task jarPlatformBase(type: Jar){
    archiveFileName = "${base.archivesBaseName}Desktop-platform.jar"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from{
        configurations.runtimeClasspath.collect{ it.isDirectory() ? it : zipTree(it) }
    }

    from(projectDir){
        include "mod.hjson"
    }

    from("assets/"){
        include "**"
    }

    from(sourceSets.main.output)

}

task androidSDKPlatform{
    dependsOn "jarPlatformBase"

    doLast{
        if(!sdkRoot || !new File(sdkRoot).exists()) throw new GradleException("No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory.");

        def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find{ f -> new File(f, "android.jar").exists()}

        if(!platformRoot) throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")

        //collect dependencies needed for desugaring
        def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")]).collect{ "--classpath $it.path" }.join(" ")

        def d8 = isWindows ? "d8.bat" : "d8"

        //dex and desugar files - this requires d8 in your PATH
        "$d8 $dependencies --min-api 14 --output ${project.archivesBaseName}Android-platform.jar ${project.archivesBaseName}Desktop-platform.jar"
                .execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
    }
}

task jarPlatform(type: Jar){
    dependsOn jarPlatformBase
    dependsOn androidSDKPlatform
    archiveFileName = "${base.archivesBaseName}-platform.jar"

    from{ [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop-platform.jar"), zipTree("$buildDir/libs/${project.archivesBaseName}Android-platform.jar")] }

    doLast{
        delete{
            delete "$buildDir/libs/${project.archivesBaseName}Desktop-platform.jar"
            delete "$buildDir/libs/${project.archivesBaseName}Android-platform.jar"
        }
    }
}

task jarLinux(type: Jar) {
    archiveFileName.set("${base.archivesBaseName}-linux.jar")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from {

        configurations.runtimeClasspath.filter { file ->
            !(platforms - "linux").any { keyword -> file.name.contains(keyword)
            }
        }.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    from(projectDir) {
        include "mod.hjson"
    }

    from("assets/") {
        include "**"
    }

    from(sourceSets.main.output)
}

task jarWindows(type: Jar) {
    archiveFileName.set("${base.archivesBaseName}-windows.jar")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from {

        configurations.runtimeClasspath.filter { file ->
            !(platforms - "windows").any { keyword -> file.name.contains(keyword)
            }
        }.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    from(projectDir) {
        include "mod.hjson"
    }

    from("assets/") {
        include "**"
    }

    from(sourceSets.main.output)
}

task jarMac(type: Jar) {
    archiveFileName.set("${base.archivesBaseName}-mac.jar")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from {

        configurations.runtimeClasspath.filter { file ->
            !(platforms - "macos").any { keyword -> file.name.contains(keyword)
            }
        }.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    from(projectDir) {
        include "mod.hjson"
    }

    from("assets/") {
        include "**"
    }

    from(sourceSets.main.output)
}

task jarAndroidBase(type: Jar) {
    archiveFileName.set("${base.archivesBaseName}Desktop-android.jar")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from {

        configurations.runtimeClasspath.filter { file ->
            !((platforms - ["android-x86", "android-arm64"])).any { keyword -> file.name.contains(keyword)
            }
        }.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    from(projectDir) {
        include "mod.hjson"
    }

    from("assets/") {
        include "**"
    }

    from(sourceSets.main.output)

}

task androidSDK{
    dependsOn "jarAndroidBase"

    doLast{
        if(!sdkRoot || !new File(sdkRoot).exists()) throw new GradleException("No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory.");

        def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find{ f -> new File(f, "android.jar").exists()}

        if(!platformRoot) throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")

        //collect dependencies needed for desugaring
        def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")]).collect{ "--classpath $it.path" }.join(" ")

        def d8 = isWindows ? "d8.bat" : "d8"

        //dex and desugar files - this requires d8 in your PATH
        "$d8 $dependencies --min-api 14 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop-android.jar"
                .execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
    }
}

task jarAndroid(type: Jar){
    dependsOn jarAndroidBase
    dependsOn androidSDK
    archiveFileName = "${base.archivesBaseName}-android.jar"

    from{ [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop-android.jar"), zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")] }

    doLast{
        delete{
            delete "$buildDir/libs/${project.archivesBaseName}Desktop-android.jar"
            delete "$buildDir/libs/${project.archivesBaseName}Android.jar"
        }
    }
}

task deployVersions(){
    dependsOn jarLinux
    dependsOn jarWindows
    // android is unsupported for now, due to issue regarding ffmpeg native libraries
//    dependsOn jarAndroid
    dependsOn jarMac
}

task deploy() {
    dependsOn jarLinux
    dependsOn jarWindows
    dependsOn jarMac
    dependsOn jarPlatform
}